import React, { useState } from 'react';
import { View, Text, TouchableOpacity, Animated } from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { StyleSheet, Dimensions } from 'react-native';


const App = () => {
  const [selectedOption, setSelectedOption] = useState(null);
  const transitionValue = useState(new Animated.Value(0))[0];

  const options = [
    {
      text: 'Como usar o Shell Pass',
      description:
        'Para utilizar o Shell Pass, basta você colocar as informações das suas últimas trocas no aplicativo e o app te mostrará qual é a troca mais urgente para você, por exemplo.',
      redirectText: 'Página do Shell Pass',
    },
    {
      text: 'Problemas no pagamento',
      description: 'Ajuda para resolver problemas relacionados ao pagamento.',
      redirectText: 'Página de Problemas de Pagamento',
    },
    {
      text: 'Problemas na minha conta',
      description: 'Soluções para questões relacionadas à sua conta.',
      redirectText: 'Página de Problemas de Conta',
    },
    {
      text: 'Descontos',
      description: 'Informações sobre os descontos disponíveis.',
      redirectText: 'Página de Descontos',
    },
    {
      text: 'Resgate de milhas',
      description: 'Passo a passo para resgatar suas milhas.',
      redirectText: 'Página de Resgate de Milhas',
    },
  ];

  const handleOptionClick = (optionIndex) => {
    setSelectedOption(optionIndex);
    Animated.timing(transitionValue, {
      toValue: 1,
      duration: 300,
      useNativeDriver: false,
    }).start();
  };

  const handleBackClick = () => {
    setSelectedOption(null);
    Animated.timing(transitionValue, {
      toValue: 0,
      duration: 300,
      useNativeDriver: false,
    }).start();
  };

  const transitionStyle = {
    transform: [
      {
        translateX: transitionValue.interpolate({
          inputRange: [0, 1],
          outputRange: [400, 0],
        }),
      },
    ],
  };

  return (
    <View style={styles.container}>
      <View style={styles.yellowBackground}>
        <Text style={styles.yellowText}>Como podemos te ajudar?</Text>
      </View>
      <View style={styles.content}>
        <View style={styles.optionFrame}>
          <View style={styles.optionContainer}>
            {options.map((option, index) => (
              <TouchableOpacity
                key={option.text}
                onPress={() => handleOptionClick(index)}
                style={[
                  styles.option,
                  selectedOption === index && styles.selectedOption,
                ]}
              >
                <Text
                  style={[
                    styles.optionText,
                    selectedOption === index && styles.selectedOptionText,
                  ]}
                >
                  {option.text}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </View>
      {/* Área de transição */}
      <Animated.View style={[styles.transitionContainer, transitionStyle]}>
        {selectedOption !== null && (
          <View style={[styles.transitionTab, styles.centeredContent]}>
            <View style={styles.transitionTabInner}>
              <Text style={styles.transitionText}>
                {options[selectedOption]?.description}
              </Text>
            </View>
            <TouchableOpacity onPress={handleBackClick} style={styles.backButton}>
              <MaterialIcons name="keyboard-arrow-right" size={24} color="white" />
            </TouchableOpacity>
          </View>
        )}
      </Animated.View>
    </View>
  );
};

const windowWidth = Dimensions.get('window').width;
const windowHeight = Dimensions.get('window').height;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f0f0',
  },
  yellowBackground: {
    height: '22%',
    backgroundColor: 'yellow',
    justifyContent: 'center',
    alignItems: 'center',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
  },
  yellowText: {
    fontSize: 24,
    textAlign: 'center',
  },
  content: {
    flex: 2,
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  optionFrame: {
    borderWidth: 16,
    borderColor: 'purple',
    borderRadius: 20,
    marginHorizontal: 20,
    marginVertical: 20,
  },
  optionContainer: {
    marginVertical: 12,
  },
  option: {
    marginBottom: 12,
    paddingHorizontal: 30,
    paddingVertical: 20,
    backgroundColor: '#ffffcc',
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingRight: 20,
  },
  selectedOption: {
    backgroundColor: 'yellow',
  },
  selectedOptionText: {
    color: 'black',
  },
  optionText: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  transitionContainer: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'white',
    zIndex: 1,
  },
  transitionTab: {
    position: 'absolute',
    bottom: 400,
    left: 0,
    width: windowWidth,
    backgroundColor: 'white',
    padding: 10,
    borderTopRightRadius: 1,
    borderTopLeftRadius: 1,
    elevation: 10,
    justifyContent: 'center', // Centralizar verticalmente com base na tela
  },
  transitionTabInner: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center', // Alinhar o texto verticalmente ao centro
    paddingHorizontal:  40,
  },
  transitionText: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  backButton: {
    position: 'absolute',
    bottom: 1,
    left: 10,
    backgroundColor: 'purple',
    padding: 10,
    borderRadius: 8,
    flexDirection: 'row',
    alignItems: 'center',
  },
});

export default App;